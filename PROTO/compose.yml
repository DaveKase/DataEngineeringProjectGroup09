version: '3.8'

networks:
  airflow_network:
    driver: bridge

x-airflow-common: &airflow-common
  build:
    context: ./airflow
  environment:
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
    _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    _WEATHER_API_KEY: ${_WEATHER_API_KEY}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./config_files://opt/airflow/config_files #Configuration details
    - ./mnt/tmp/csv_data:/mnt/tmp/csv_data
    - ./mnt/tmp/duckdb_data:/mnt/tmp/duckdb_data
    - ./mnt/tmp/warehouse:/iceberg/warehouse  # Access to Iceberg warehouse
    - ./mnt/tmp/warehouse:/mnt/tmp/warehouse # DuckDB access
    - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket for Airflow services
  user: "${AIRFLOW_UID:-50000}:0"
  networks:
    - airflow_network
  depends_on:
    - redis
    - postgres

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - airflow_network

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - airflow_network

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    # volumes:
    #   - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    # volumes:
    #   - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8793/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    # volumes:
    #   - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD-SHELL", 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init
        airflow users create \
          --username "${_AIRFLOW_WWW_USER_USERNAME}" \
          --password "${_AIRFLOW_WWW_USER_PASSWORD}" \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com
    user: "0:0"
    restart: on-failure

  duckdb:
    container_name: duckdb
    build:
      context: ./duckdb
    volumes:
      - ./mnt/tmp/duckdb_data:/mnt/tmp/duckdb_data
      - ./mnt/tmp/warehouse:/mnt/tmp/warehouse
    stdin_open: true
    tty: true
    networks:
      - airflow_network

  iceberg_rest:
    build:
      context: ./iceberg_rest  # Make sure this path has the Dockerfile for iceberg_rest
    container_name: iceberg_rest
    ports:
      - "8181:8181"
    environment:
      CATALOG_WAREHOUSE: /iceberg/warehouse
    volumes:
      - ./mnt/tmp/warehouse:/iceberg/warehouse
    user: "0:0"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/v1/config"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - airflow_network

  dbt:
    build:
      context: ./dbt
    container_name: dbt
    tty: true
    command: ["tail", "-f", "/dev/null"]
    volumes:
      - ./mnt/tmp/duckdb_data:/usr/app/mnt/tmp/duckdb_data
      - ./mnt/tmp/dbt_project:/usr/app/
      - ./mnt/tmp/.dbt:/root/.dbt
    ports:
      - "18080:8080"
    networks:
      - airflow_network

  sl:
    container_name: sl
    build:
      context: ./streamlit
    volumes:
      - ./streamlit:/usr/app  
      - ./mnt/tmp/duckdb_data:/usr/app/data 
    ports:
      - "8501:8501" 
    networks:
      - airflow_network 

volumes:
  postgres-db-volume:
